name: "Resolve Assignment from Branch"
description: "Extracts an assignment ID from a JSON variable based on the current branch name."
inputs:
  available_assignments:
    description: "JSON object mapping branch names to assignment IDs"
    required: true
outputs:
  assignment:
    description: "The assignment ID corresponding to the current branch"
    value: ${{ steps.get-assignment.outputs.assignment }}
runs:
  using: "composite"
  steps:
    - name: Debug
      shell: bash
      run: |
        echo "Branch: ${{ github.base_ref }}"
        echo "PR Branch: ${{ github.event.base }}"
        echo "PR Branch: ${{ toJSON(github.event) }}"
        echo "${{ inputs.available_assignments }}"
        echo '${{ inputs.available_assignments }}' | jq empty || { echo "Invalid JSON"; exit 1; }

    - name: Extract assignment from org variable
      id: get-assignment
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == *"refs/tags/"* ]]; then
          TAG="${GITHUB_REF#refs/tags/}"   # Remove refs/tags/
          NUM=$(echo "$TAG" | sed -E 's/^v([0-9]+).*/\1/')
          echo "First number after v: $NUM"
          PADDED=$(printf "%02d" "$NUM")
          KMOM="kmom$PADDED"
          echo "Result tag: $KMOM"
        else
          REF=${{ github.event.pull_request.base.ref && github.event.pull_request.base.ref || github.base_ref }}
          KMOM="${$REF#bth/submit/}"   # Remove bth/submit/ from base ref
          echo "Result branch: $KMOM"
        fi
        assignment_id=$(echo '${{ inputs.available_assignments }}' | jq -r --arg branch "${{ github.base_ref }}" '.[$branch]')
        echo "assignment=$assignment_id"
        if [[ "$assignment_id" == "null" || -z "$assignment_id" ]]; then
          echo "No assignment found for branch: ${{ github.base_ref }}"
          exit 1
        fi

        echo "assignment=$assignment_id" >> "$GITHUB_OUTPUT"