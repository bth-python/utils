name: Grade After PR Merge

on:
  workflow_call:
    inputs:
      course_id:
        required: true
        type: string
      available_assignments:
        required: true
        type: string
      student_id:
        required: true
        type: string

jobs:
  resolve-assignment:
    name: Resolve Assignment from Branch
    runs-on: ubuntu-latest
    steps:
      - uses: bth-python/utils/.github/actions/get-assignment-id@dev
        id: resolve
        with:
          available_assignments: ${{ inputs.available_assignments }}

  check-authorization:
    name: Check PR Merger Authorization
    runs-on: ubuntu-latest
    needs: resolve-assignment
    outputs:
      authorized: ${{ steps.verify.outputs.authorized }}
      merged_by: ${{ steps.get-pr.outputs.merged_by }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      # - name: Get PR that triggered this push
      #   id: get-pr
      #   env:
      #     GH_TOKEN: ${{ secrets.READ_ORG_TOKEN }}
      #   run: |
      #     PR_JSON=$(gh pr list --state merged --base "$GITHUB_REF_NAME" --limit 1 --json mergedBy)
      #     echo "$PR_JSON"

      #     merged_by=$(echo "$PR_JSON" | jq -r '.[0].mergedBy.login')
      #     if [[ -z "$merged_by" || "$merged_by" == "null" ]]; then
      #       echo "No merger found"
      #       exit 1
      #     fi

      #     echo "merged_by=$merged_by" >> $GITHUB_OUTPUT

      - name: Get last review comment
        id: get-pr
        uses: actions/github-script@v7
        with:
            github-token: ${{ secrets.READ_ORG_TOKEN }}
            script: |
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                per_page: 100
              });
              if (reviews.length > 0) {
                const lastReview = reviews[reviews.length - 1];
                core.setOutput('merged_by', lastReview.user.login);
              }


      - name: Check if user is in 'teacher' team
        id: verify
        env:
          GH_TOKEN: ${{ secrets.READ_ORG_TOKEN }}
        run: |
          user="${{ steps.get-pr.outputs.merged_by }}"
          echo "Checking membership for $user..."
          echo "$(gh api /orgs/bth-python/teams --jq '.[].slug')"
          status=$(gh api orgs/bth-python/teams/teacher/memberships/$user --jq '.state' || echo "not_found")
          echo "$status"
          if [[ "$status" == "active" ]]; then
            echo "authorized=true" >> "$GITHUB_OUTPUT"
          else
            echo "User is not authorized"
            echo "authorized=false" >> "$GITHUB_OUTPUT"
          fi

  report-closed-pr-to-canvas:
    name: "Update canvas with merged PR"
    runs-on: ubuntu-latest
    needs: [resolve-assignment, check-authorization]
    env:
      STATUS: ${{ ((needs.check-authorization.outputs.authorized)) && 'Merge was done by authorized user.' || 'Someone other than authorized teacher tried to merge PR. Contact course responsible.' }}
    steps:
      - name: Get latest approved review message
        id: get_review
        run: |
          reviews_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews"
          reviews=$(curl -sSL -H "Authorization: Bearer ${{ secrets.READ_ORG_TOKEN }}" "$reviews_url")
          # Get the latest approved review body (if any)
          latest=$(echo "$reviews" | jq -r '[.[] | select(.state == "APPROVED")][-1].body')
          # Save as output for next step
          echo "latest_approved_review<<EOF" >> $GITHUB_OUTPUT
          echo "$latest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create comment
        id: created_comment
        run: |
          cat << EOF >> $GITHUB_OUTPUT
          myoutput<<EOM
          Pull Request Action: Merged
          Status: $STATUS
          ${{ steps.get_review.outputs.latest_approved_review }}

          User who merged: ${{ github.event.sender.login }}
          PR URL: ${{ github.event.pull_request.html_url }}
          EOM
          EOF

      - uses: bth-python/utils/.github/actions/get-assignment-id@dev
        id: resolve
        with:
          available_assignments: ${{ inputs.available_assignments }}

      - name: Set grade variable
        id: set_grade
        run: echo "grade=${{ (needs.check-authorization.outputs.authorized) && 'G' || 'U' }}" >> $GITHUB_OUTPUT

      - name: Update Canvas with closed PR
        uses: bth-python/utils/.github/actions/update-canvas@dev
        with:
          subcommand: "grade_submission"
          grade: "${{ steps.set_grade.outputs.grade }}"
          comment: "${{ steps.created_comment.outputs.myoutput }}"
          canvas_api_token: ${{ secrets.CANVAS_API_TOKEN }}
          course_id: ${{inputs.course_id}}
          assignment_id: ${{ steps.resolve.outputs.assignment }}
          student_id: ${{ inputs.student_id }}
          read_org_token: "${{ secrets.READ_ORG_TOKEN }}"


  label-on-merged:
    needs: [check-authorization]
    runs-on: ubuntu-latest
    if: ${{ (needs.check-authorization.outputs.authorized) }}
    steps:
    - name: Add "Approved" label
      uses: actions-ecosystem/action-add-labels@v1
      with:
        github_token: ${{ secrets.READ_ORG_TOKEN }}
        labels: "Approved"

    - name: Remove "PG" label. . Det gör inget om denna får error, ignorera
      uses: actions-ecosystem/action-remove-labels@v1
      with:
        github_token: ${{ secrets.READ_ORG_TOKEN }}
        labels: "PG"
      continue-on-error: true
