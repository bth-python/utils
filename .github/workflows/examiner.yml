name: Reusable Deploy

on:
  workflow_call:
    inputs:
      event:
        required: true
        type: string
      course_id:
        required: true
        type: string
      available_assignments:
        required: true
        type: string

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      labs: ${{ steps.set-matrix.outputs.labs }}
      kmoms: ${{ steps.set-matrix.outputs.kmoms }}

    steps:
      - name: Extract labs and kmoms based on PR branch
        id: set-matrix
        env:
          MAP_JSON: >
            {
              "bth/submit/kmom03": { 
                "labs": ["src/kmom01/lab_01", "src/kmom02/lab_02", "src/kmom03/lab_03"],
                "kmoms": ["tests/kmom01/convert", "tests/kmom02/convert", "tests/kmom03/convert"]
              },
              "bth/submit/kmom06": { 
                "labs": ["src/kmom04/lab_04", "src/kmom05/lab_05", "src/kmom06/lab_06"],
                "kmoms": ["tests/kmom04/convert", "tests/kmom05/convert", "tests/kmom06/convert"]
              },
              "bth/submit/kmom10": { 
                "labs": [],
                "kmoms": ["tests/kmom10/convert"]
              }
            }

        run: |
          BRANCH="${{ github.base_ref }}"
          echo "ðŸ“Œ Branch: $BRANCH"

          LABS=$(echo "$MAP_JSON" | jq -c --arg b "$BRANCH" '.[$b].labs // []')
          KMOMS=$(echo "$MAP_JSON" | jq -c --arg b "$BRANCH" '.[$b].kmoms // []')

          echo "âœ… Labs: $LABS"
          echo "âœ… Kmoms: $KMOMS"

          echo "labs={\"folder\":$LABS}" >> $GITHUB_OUTPUT
          echo "kmoms={\"folder\":$KMOMS}" >> $GITHUB_OUTPUT

  run-labs:
    needs: [generate-matrix]
    if: needs.generate-matrix.outputs.labs != '{"folder":[]}'
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.labs) }}

    steps:
      - name: setup-python
        uses: bth-python/utils/.github/actions/setup-python@main
      - name: Run lab test in ${{ matrix.folder }}
        run: |
          echo "ðŸ”¬ Running lab: ${{ matrix.folder }}"
          uv run ${{ matrix.folder }}/lab.py

  run-kmoms:
    needs: [generate-matrix]
    if: needs.generate-matrix.outputs.kmoms != '{"folder":[]}'
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.kmoms) }}

    steps:
      - name: setup-python
        uses: bth-python/utils/.github/actions/setup-python@main
      - name: Run kmom test in ${{ matrix.folder }}
        run: |
          echo "ðŸ”¬ Running kmom: ${{ matrix.folder }}"
          uv run tester -f ${{ matrix.folder }}

      - name: Run extra tests in ${{ matrix.folder }}
        continue-on-error: true
        run: |
          echo "ðŸ”¬ Running extras: ${{ matrix.folder }}"
          uv run tester -f -e ${{ matrix.folder }}

  update-canvas:
    needs: [run-kmoms, run-labs]
    runs-on: ubuntu-latest
    if: always()
    env:
      GRADE: ${{ (needs.run-kmoms.result == 'success' && needs.run-labs.result == 'success') && 'G' || 'Ux' }}
      OUTCOME: ${{ (needs.run-kmoms.result == 'success' && needs.run-labs.result == 'success') && 'All tests have passed.' || 'Something failed, look through logs to see what you need to fix.' }}
    steps:
      - name: Create comment
        id: created_comment
        run: |
          cat << EOF >> $GITHUB_OUTPUT
          myoutput<<EOM
          Pull Request opened
          Status:
          $OUTCOME


          PR URL: ${{ fromJson(inputs.event).pull_request.html_url }}
          EOM
          EOF

      - uses: bth-python/utils/.github/actions/get-assignment-id@main
        id: resolve
        with:
          available_assignments: ${{ inputs.available_assignments }}
          pull_request: ${{ toJson(fromJson(inputs.event).pull_request) }}

      - name: Update Canvas with need to fix
        uses: bth-python/utils/.github/actions/update-canvas@main
        with:
          grade: "$GRADE"
          comment: "${{ steps.created_comment.outputs.myoutput }}"
          canvas_api_token: ${{ secrets.CANVAS_API_TOKEN }}
          course_id: ${{inputs.course_id}}
          assignments_id: ${{ steps.resolve.outputs.assignment }}
